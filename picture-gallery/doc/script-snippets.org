* Curl tests
  #+BEGIN_SRC shell :results output file :file test_curl_output :output-dir /tmp/
    cookiejar="/tmp/test_curl_cookiejar"
    rand_userid="foo${RANDOM}"
    password="randompass"

    cleanup_tmp_files() {
        rm "${cookiejar}" "/tmp/test_curl_output"
    }

    cleanup_record_from_db() {
        local user_id=${1:?"Fatal. Must pass unique user id."}

        psql -d "gallery" -c "DELETE from users where id = $(printf "\'%s\'" ${user_id});"
    }

    cleanup_image_dir_from_server() {
        local user_id=${1:?"Fatal. Must pass unique user id."}

        rm -vr "$(realpath ../resources/galleries/${user_id})"
    }

    post_urlencoded_form() {
        local route=${1:?"Fail. Please pass route."}
        local data=${2:?"Fail. Please pass urlencoded data."}
        local hostport=${3:-"localhost:8080"}

        curl -L -c "${cookiejar}" \
             -POST -H "Content-Type: application/x-www-form-urlencoded" \
             -d "${data}" "http://${hostport}/${route}"
    }

    post_image_form() {
        local route=${1:?"Fail. Please pass route."}
        local imgfile=${2:-"NOFILE"}
        local hostport=${3:-"localhost:8080"}

        if [[ ${imgfile} != "NOFILE" && -f ${imgfile} ]]
        then # RTFM and fix. ref: https://ec.haxx.se/http/http-multipart
            curl -L -b "${cookiejar}" \
                 -F file=@${imgfile} "http://${hostport}/${route}"
        else # try to upload empty file
            curl -L -b "${cookiejar}" \
                 -F file="" "http://${hostport}/${route}"
        fi
    }

    goto_url() {
        local route=${1:?"Fail. Please pass route."}
        local hostport=${2:-"localhost:8080"}

        curl -L -b "${cookiejar}" \
             -GET "http://${hostport}/${route}"
    }

    about_to_execute() {
        printf "\n\n===%s===\n" "${1}"
    }

    __login_as_user() {
        local userid=${1:-"Fail. User id required."}
        local pass=${2:-"Fail. Password required."}

        post_urlencoded_form "login" "id=${userid}&pass=${pass}"
    }

    execute_auth_actions() {
        printf "===%s===" "About to execute various auth actions for user ${rand_userid}"

        about_to_execute "POST REGISTER"
        post_urlencoded_form "register" "id=${rand_userid}&pass=${password}&pass1=${password}"

        about_to_execute "POST LOGIN"
        __login_as_user "${rand_userid}" "${password}"

        about_to_execute "POST LOGIN AGAIN"
        __login_as_user "${rand_userid}" "${password}"

        about_to_execute "POST REGISTER AGAIN"
        post_urlencoded_form "register" "id=${rand_userid}&pass=${password}&pass1=${password}"

        about_to_execute "GET LOGIN redirects to HOME (diff below must be empty)"
        diff -s --label "<REDIRECT FROM LOGIN>" <(goto_url "login") --label "<LOGGED IN HOME PAGE>" <(goto_url ' ')

        about_to_execute "GET REGISTER redirects to HOME (diff below must be empty)"
        diff -s --label "<REDIRECT FROM REGISTER>" <(goto_url "register") --label "<LOGGED IN HOME PAGE>" <(goto_url ' ')
    }

    execute_upload_image() {
        # hex codes from wikipedia for PNG
        local redpixel="$(cat <<EOF
    89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52
    00 00 00 01 00 00 00 01 08 02 00 00 00 90 77 53
    DE 00 00 00 0C 49 44 41 54 08 D7 63 F8 CF C0 00
    00 03 01 01 00 18 DD 8D B0 00 00 00 00 49 45 4E
    44 AE 42 60 82
    EOF
                )"
        local imgfile="/tmp/redpixel.png"
        local dom_pattern='<img.*redpixel.png.>'

        xxd -r -p <(echo "${redpixel}") > ${imgfile}

        about_to_execute "POST image file"
        post_image_form "upload" "${imgfile}" |
            # the page must contain the image
            grep -E -o "${dom_pattern}"

        rm ${imgfile}
    }

    execute_upload_null_image() {
        local imgfile="/tmp/emptyfile"
        local dom_pattern='<img.*emptyfile.>'

        cat /dev/null > "${imgfile}"

        about_to_execute "POST NULL file"
        post_image_form "upload" "${imgfile}" |
            # although image is null, it's still a file
            grep -E -o "${dom_pattern}"
        rm ${imgfile}
    }

    execute_upload_no_image() {
        about_to_execute "POST NO file at all"
        post_image_form "upload" "" |
            # the page must have this error message
            grep -o "Please select a file to upload"
    }

    execute_upload_image_actions() {
        # Only works for authenticated users
        __login_as_user "${rand_userid}" "${password}" > /dev/null

        execute_upload_image
        execute_upload_null_image
        execute_upload_no_image
    }

    # Authentication actions
    # - Also creates a random user, that we use later
    execute_auth_actions

    # Image file uploads
    # - We must ensure a user is logged in
    execute_upload_image_actions

    # Cleanups
    about_to_execute "DELETE ${rand_userid} record from test db"
    cleanup_record_from_db ${rand_userid}

    about_to_execute "DELETE ${rand_userid}'s image gallery from disk"
    cleanup_image_dir_from_server ${rand_userid}

    # cleanup_tmp_files # call if needed
  #+END_SRC

  #+RESULTS:
  [[file:/tmp/test_curl_output]]
